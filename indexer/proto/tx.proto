syntax = "proto3";
package mmn;

option go_package = "mmn/proto;proto";

// Transaction status enum
enum TransactionStatus {
  PENDING = 0;      // Transaction is in mempool
  CONFIRMED = 1;    // Transaction is included in a block
  FINALIZED = 2;    // Transaction is finalized (block has enough votes)
  FAILED = 3;       // Transaction failed validation
}

message TxMsg { 
  int32 type = 1;
  string sender = 2;
  string recipient = 3;
  uint64 amount = 4;
  uint64 timestamp = 5;
  string text_data = 6;
  uint64 nonce = 7;
}

message SignedTxMsg {
  TxMsg tx_msg = 1;
  string signature = 2;
}

message TxResponse { 
  bool   ok    = 1; 
  string error = 2; 
}

message AddTxResponse {
  bool   ok      = 1;
  string tx_hash = 2;
  string error   = 3;
}

message GetTxByHashRequest {
  string tx_hash = 1;
}

message TxInfo {
  string sender = 1;
  string recipient = 2;
  uint64 amount = 3;
  uint64 timestamp = 4;
  string text_data = 5;
}

message GetTxByHashResponse {
  string error = 1;
  TxInfo tx = 2;
}

// Request to get transaction status
message GetTransactionStatusRequest {
  string tx_hash = 1;
}

// Unified transaction status message used for both unary and streaming responses
message TransactionStatusInfo {
  string tx_hash = 1;
  TransactionStatus status = 2;
  uint64 block_slot = 3;        // Slot where transaction was included (if confirmed/finalized)
  string block_hash = 4;        // Hash of the block (if confirmed/finalized)
  uint64 confirmations = 5;     // Number of confirmations
  string error_message = 6;     // Error message if failed
  uint64 timestamp = 7;         // Timestamp when status was last updated
}

// Request to subscribe to all transaction status updates
message SubscribeTransactionStatusRequest {
  // Empty request - subscribes to all transaction events
}

service TxService {
  rpc TxBroadcast (SignedTxMsg) returns (TxResponse);
  rpc AddTx (SignedTxMsg) returns (AddTxResponse);
  rpc GetTxByHash (GetTxByHashRequest) returns (GetTxByHashResponse);
  
  // Get current status of a transaction
  rpc GetTransactionStatus(GetTransactionStatusRequest) returns (TransactionStatusInfo);
  
  // Subscribe to status updates for all transactions
  rpc SubscribeTransactionStatus(SubscribeTransactionStatusRequest) returns (stream TransactionStatusInfo);
}
